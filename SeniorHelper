from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.label import Label
from kivy.uix.button import Button
from kivy.uix.dropdown import DropDown
from kivy.uix.spinner import Spinner
from kivy.uix.textinput import TextInput
from kivy.uix.scrollview import ScrollView
from kivy.uix.gridlayout import GridLayout
from kivy.uix.popup import Popup
from kivy.uix.switch import Switch
from kivy.clock import Clock
from kivy.utils import get_color_from_hex
from kivy.core.clipboard import Clipboard
from datetime import datetime, timedelta
import webbrowser
import threading
import time

class SeniorHelperApp(App):
    def build(self):
        # Основной макет
        self.layout = BoxLayout(orientation='vertical', spacing=10, padding=10)
        
        # Настройки для экстренных контактов
        self.emergency_contacts = {
            "Скорая помощь": "112",
            "Полиция": "112",
            "Пожарная (МЧС)": "112",
            "Служба газа": "112"
        }
        
        # Настройки видеозвонка (Jitsi Meet)
        self.jitsi_server = "https://meet.jit.si/SeniorHelper-"
        self.current_video_call_url = ""
        
        # Список напоминаний
        self.reminders = []
        
        # Создание интерфейса
        self.create_sos_section()
        self.create_video_call_section()
        self.create_reminders_section()
        self.create_log_section()
        
        # Запуск проверки напоминаний
        Clock.schedule_interval(self.check_reminders, 30)
        
        return self.layout
    
    def create_sos_section(self):
        # Раздел SOS
        sos_layout = BoxLayout(orientation='vertical', size_hint=(1, 0.2))
        
        # Выбор типа помощи
        self.help_type = Spinner(
            text="Скорая помощь",
            values=list(self.emergency_contacts.keys()),
            size_hint=(1, 0.3),
            background_color=get_color_from_hex("#4CAF50"),
        )
        
        # Кнопка SOS
        self.sos_button = Button(
            text="SOS",
            size_hint=(1, 0.7),
            background_color=get_color_from_hex("#F44336"),
            color=get_color_from_hex("#FFFFFF"),
            font_size=24,
            on_press=self.send_sos
        )
        
        # Статус SOS
        self.sos_status = Label(
            text="Готов",
            color=get_color_from_hex("#4CAF50"),
            size_hint=(1, 0.2))
        
        sos_layout.add_widget(self.help_type)
        sos_layout.add_widget(self.sos_button)
        sos_layout.add_widget(self.sos_status)
        
        self.layout.add_widget(sos_layout)
    
    def create_video_call_section(self):
        # Раздел видеозвонка
        video_layout = BoxLayout(orientation='horizontal', size_hint=(1, 0.15))
        
        self.video_call_button = Button(
            text="Видеозвонок",
            size_hint=(0.7, 1),
            background_color=get_color_from_hex("#2196F3"),
            color=get_color_from_hex("#FFFFFF"),
            on_press=self.start_video_call
        )
        
        self.copy_link_button = Button(
            text="Копировать ссылку",
            size_hint=(0.3, 1),
            background_color=get_color_from_hex("#BBDEFB"),
            disabled=True,
            on_press=self.copy_video_link
        )
        
        video_layout.add_widget(self.video_call_button)
        video_layout.add_widget(self.copy_link_button)
        
        self.layout.add_widget(video_layout)
    
    def create_reminders_section(self):
        # Раздел напоминаний
        reminders_layout = BoxLayout(orientation='vertical', size_hint=(1, 0.3))
        
        # Кнопка добавления напоминания
        add_reminder_button = Button(
            text="Добавить напоминание",
            size_hint=(1, 0.2),
            background_color=get_color_from_hex("#4CAF50"),
            color=get_color_from_hex("#FFFFFF"),
            on_press=self.show_add_reminder_popup
        )
        
        # Список напоминаний
        self.reminders_list = GridLayout(cols=1, spacing=5, size_hint_y=None)
        self.reminders_list.bind(minimum_height=self.reminders_list.setter('height'))
        
        scroll_view = ScrollView(size_hint=(1, 0.8))
        scroll_view.add_widget(self.reminders_list)
        
        reminders_layout.add_widget(add_reminder_button)
        reminders_layout.add_widget(scroll_view)
        
        self.layout.add_widget(reminders_layout)
    
    def create_log_section(self):
        # Раздел лога
        log_layout = BoxLayout(orientation='vertical', size_hint=(1, 0.35))
        
        log_label = Label(
            text="Журнал событий:",
            size_hint=(1, 0.1),
            color=get_color_from_hex("#000000")
        )
        
        self.log_text = TextInput(
            readonly=True,
            size_hint=(1, 0.9),
            background_color=get_color_from_hex("#FFFFFF")
        )
        
        log_layout.add_widget(log_label)
        log_layout.add_widget(self.log_text)
        
        self.layout.add_widget(log_layout)
    
    def send_sos(self, instance):
        help_type = self.help_type.text
        contact_number = self.emergency_contacts.get(help_type, "112")
        
        self.sos_status.text = f"Вызов {help_type}..."
        self.sos_status.color = get_color_from_hex("#FF9800")
        self.log(f"Активирована кнопка SOS - вызов {help_type}")
        
        # Имитация отправки SOS в отдельном потоке
        threading.Thread(target=self._simulate_sos_send, args=(help_type, contact_number)).start()
    
    def _simulate_sos_send(self, help_type, contact_number):
        time.sleep(2)  # Имитация задержки
        self.log(f"SOS уведомление отправлено: {help_type}")
        
        # Обновление интерфейса из главного потока
        def update_ui():
            self.sos_status.text = f"{help_type} в пути!"
            self.sos_status.color = get_color_from_hex("#4CAF50")
            self.show_popup("SOS", f"{help_type} уже в пути! Оставайтесь на связи.")
        
        Clock.schedule_once(lambda dt: update_ui())
    
    def start_video_call(self, instance):
        room_id = datetime.now().strftime("%Y%m%d%H%M%S")
        self.current_video_call_url = f"{self.jitsi_server}{room_id}"
        
        self.log(f"Создана ссылка на видеозвонок: {self.current_video_call_url}")
        self.copy_link_button.disabled = False
        
        webbrowser.open(self.current_video_call_url)
        self.show_popup("Видеозвонок", "Видеозвонок начат. Скопируйте ссылку для приглашения.")
    
    def copy_video_link(self, instance):
        if self.current_video_call_url:
            Clipboard.copy(self.current_video_call_url)
            self.log("Ссылка скопирована в буфер обмена")
            self.show_popup("Копирование", "Ссылка скопирована!")
    
    def show_add_reminder_popup(self, instance):
        # Всплывающее окно для добавления напоминания
        content = BoxLayout(orientation='vertical', spacing=10)
        
        # Название лекарства
        medicine_input = TextInput(hint_text="Название лекарства", multiline=False)
        
        # Время
        time_layout = BoxLayout(orientation='horizontal')
        hour_spinner = Spinner(text="12", values=[f"{i:02d}" for i in range(24)])
        minute_spinner = Spinner(text="00", values=[f"{i:02d}" for i in range(60)])
        time_layout.add_widget(Label(text="Время:"))
        time_layout.add_widget(hour_spinner)
        time_layout.add_widget(Label(text=":"))
        time_layout.add_widget(minute_spinner)
        
        # Повторение
        repeat_switch = Switch()
        repeat_layout = BoxLayout(orientation='horizontal')
        repeat_layout.add_widget(Label(text="Повторять ежедневно:"))
        repeat_layout.add_widget(repeat_switch)
        
        # Кнопки
        button_layout = BoxLayout(orientation='horizontal', spacing=5)
        cancel_button = Button(text="Отмена")
        save_button = Button(text="Сохранить", background_color=get_color_from_hex("#4CAF50"))
        
        # Добавление виджетов
        content.add_widget(medicine_input)
        content.add_widget(time_layout)
        content.add_widget(repeat_layout)
        content.add_widget(button_layout)
        
        popup = Popup(
            title="Добавить напоминание",
            content=content,
            size_hint=(0.8, 0.5)
        )
        
        def save_reminder(instance):
            medicine = medicine_input.text
            time_str = f"{hour_spinner.text}:{minute_spinner.text}"
            repeat = repeat_switch.active
            
            if not medicine:
                self.show_popup("Ошибка", "Введите название лекарства")
                return
            
            try:
                reminder_time = datetime.strptime(time_str, "%H:%M").time()
                now = datetime.now()
                reminder_datetime = datetime.combine(now.date(), reminder_time)
                
                if reminder_datetime < now:
                    reminder_datetime += timedelta(days=1)
                
                reminder = {
                    "medicine": medicine,
                    "time": time_str,
                    "datetime": reminder_datetime,
                    "repeat": repeat
                }
                
                self.reminders.append(reminder)
                self.update_reminders_list()
                self.log(f"Добавлено напоминание: {medicine} в {time_str}")
                popup.dismiss()
                
            except ValueError:
                self.show_popup("Ошибка", "Неверный формат времени")
        
        cancel_button.bind(on_press=popup.dismiss)
        save_button.bind(on_press=save_reminder)
        
        button_layout.add_widget(cancel_button)
        button_layout.add_widget(save_button)
        
        popup.open()
    
    def update_reminders_list(self):
        self.reminders_list.clear_widgets()
        
        for reminder in sorted(self.reminders, key=lambda x: x["datetime"]):
            repeat = " (ежедневно)" if reminder["repeat"] else ""
            reminder_label = Label(
                text=f"{reminder['medicine']} в {reminder['time']}{repeat}",
                size_hint_y=None,
                height=40,
                color=get_color_from_hex("#000000")
            )
            self.reminders_list.add_widget(reminder_label)
    
    def check_reminders(self, dt):
        now = datetime.now()
        
        for reminder in self.reminders[:]:
            if now >= reminder["datetime"]:
                self.show_popup(
                    "Напоминание",
                    f"Пора принять {reminder['medicine']}!"
                )
                self.log(f"Напоминание: принять {reminder['medicine']}")
                
                if reminder["repeat"]:
                    # Переносим на следующий день
                    reminder["datetime"] += timedelta(days=1)
                else:
                    self.reminders.remove(reminder)
        
        self.update_reminders_list()
    
    def show_popup(self, title, message):
        popup = Popup(
            title=title,
            content=Label(text=message),
            size_hint=(0.8, 0.4)
        )
        popup.open()
    
    def log(self, message):
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.log_text.text += f"[{timestamp}] {message}\n"

if __name__ == "__main__":
    SeniorHelperApp().run()
